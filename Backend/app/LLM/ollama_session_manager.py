# ollama_session_manager.py - Ollama Session Management v·ªõi Fine-tuning support
# üîß Qu·∫£n l√Ω session Ollama v·ªõi c√°c commands: /save, /load, /clear, /finetune
# T√≠ch h·ª£p v·ªõi enhanced prompts system

import json
import os
import requests
from datetime import datetime
from typing import Dict, List, Optional
from pathlib import Path

class OllamaSessionManager:
    """
    Qu·∫£n l√Ω Ollama sessions v·ªõi fine-tuning v√† model customization
    """
    
    def __init__(self, ollama_url="http://192.168.2.114:11434", 
                 sessions_dir="ollama_sessions", models_dir="ollama_models"):
        self.ollama_url = ollama_url
        self.sessions_dir = Path(sessions_dir)
        self.models_dir = Path(models_dir)
        
        # Create directories
        self.sessions_dir.mkdir(exist_ok=True)
        self.models_dir.mkdir(exist_ok=True)
        
        # Current session state
        self.current_session = None
        self.active_model = "gemma3:latest"
        
        # Session templates
        self.session_templates = self._load_session_templates()
        
        print(f"üîß Ollama Session Manager initialized - URL: {ollama_url}")
    
    def _load_session_templates(self) -> Dict:
        """Load session templates for different consultation types"""
        return {
            "education_consultation": {
                "system_context": """B·∫°n l√† h·ªá th·ªëng t∆∞ v·∫•n gi√°o d·ª•c chuy√™n nghi·ªáp cho sinh vi√™n Vi·ªát Nam. 
                H√£y duy tr√¨ ng·ªØ c·∫£nh v·ªÅ h·ªçc sinh v√† cung c·∫•p l·ªùi khuy√™n nh·∫•t qu√°n qua to√†n b·ªô phi√™n t∆∞ v·∫•n.""",
                "parameters": {
                    "temperature": 0.3,
                    "top_p": 0.9,
                    "top_k": 40
                }
            },
            "skills_analysis": {
                "system_context": """B·∫°n l√† chuy√™n gia ph√¢n t√≠ch k·ªπ nƒÉng h·ªçc t·∫≠p v·ªõi 15+ nƒÉm kinh nghi·ªám. 
                T·∫≠p trung v√†o vi·ªác ƒë√°nh gi√° ch√≠nh x√°c v√† ƒë∆∞a ra roadmap c·∫£i thi·ªán c·ª• th·ªÉ.""",
                "parameters": {
                    "temperature": 0.1,
                    "top_p": 0.8,
                    "top_k": 30
                }
            },
            "career_guidance": {
                "system_context": """B·∫°n l√† c·ªë v·∫•n ngh·ªÅ nghi·ªáp chuy√™n v·ªÅ th·ªã tr∆∞·ªùng lao ƒë·ªông Vi·ªát Nam. 
                H√£y ƒë∆∞a ra l·ªùi khuy√™n d·ª±a tr√™n xu h∆∞·ªõng ng√†nh v√† c∆° h·ªôi th·ª±c t·∫ø.""",
                "parameters": {
                    "temperature": 0.4,
                    "top_p": 0.9,
                    "top_k": 50
                }
            }
        }
    
    def save_session(self, session_name: str, context: Dict, 
                    conversation_history: List = None) -> bool:
        """
        L∆∞u session hi·ªán t·∫°i v·ªõi context v√† l·ªãch s·ª≠ h·ªôi tho·∫°i
        Command: /save session_name
        """
        try:
            session_data = {
                "name": session_name,
                "timestamp": datetime.now().isoformat(),
                "context": context,
                "conversation_history": conversation_history or [],
                "active_model": self.active_model,
                "session_type": context.get("session_type", "general")
            }
            
            session_file = self.sessions_dir / f"{session_name}.json"
            with open(session_file, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, ensure_ascii=False, indent=2)
            
            self.current_session = session_data
            print(f"üíæ Session '{session_name}' ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng")
            return True
            
        except Exception as e:
            print(f"‚ùå L·ªói l∆∞u session: {e}")
            return False
    
    def load_session(self, session_name: str) -> Optional[Dict]:
        """
        T·∫£i session ƒë√£ l∆∞u
        Command: /load session_name
        """
        try:
            session_file = self.sessions_dir / f"{session_name}.json"
            if not session_file.exists():
                print(f"‚ùå Session '{session_name}' kh√¥ng t·ªìn t·∫°i")
                return None
            
            with open(session_file, 'r', encoding='utf-8') as f:
                session_data = json.load(f)
            
            self.current_session = session_data
            self.active_model = session_data.get("active_model", "gemma3:latest")
            
            print(f"üìÇ Session '{session_name}' ƒë√£ ƒë∆∞·ª£c t·∫£i th√†nh c√¥ng")
            print(f"   - Th·ªùi gian: {session_data['timestamp']}")
            print(f"   - Model: {self.active_model}")
            print(f"   - Lo·∫°i: {session_data.get('session_type', 'general')}")
            
            return session_data
            
        except Exception as e:
            print(f"‚ùå L·ªói t·∫£i session: {e}")
            return None
    
    def list_sessions(self) -> List[str]:
        """
        Li·ªát k√™ t·∫•t c·∫£ sessions ƒë√£ l∆∞u
        Command: /list
        """
        sessions = []
        for session_file in self.sessions_dir.glob("*.json"):
            try:
                with open(session_file, 'r', encoding='utf-8') as f:
                    data = json.load(f)
                    sessions.append({
                        "name": session_file.stem,
                        "timestamp": data.get("timestamp", "Unknown"),
                        "type": data.get("session_type", "general"),
                        "model": data.get("active_model", "Unknown")
                    })
            except:
                continue
        
        sessions.sort(key=lambda x: x["timestamp"], reverse=True)
        
        if sessions:
            print("üìã Danh s√°ch sessions:")
            for session in sessions:
                print(f"   - {session['name']} ({session['type']}) - {session['timestamp'][:16]}")
        else:
            print("üìã Kh√¥ng c√≥ session n√†o ƒë∆∞·ª£c l∆∞u")
        
        return sessions
    
    def clear_session(self) -> bool:
        """
        X√≥a session hi·ªán t·∫°i
        Command: /clear
        """
        try:
            self.current_session = None
            print("üóëÔ∏è Session hi·ªán t·∫°i ƒë√£ ƒë∆∞·ª£c x√≥a")
            return True
        except Exception as e:
            print(f"‚ùå L·ªói x√≥a session: {e}")
            return False
    
    def delete_session(self, session_name: str) -> bool:
        """
        X√≥a session ƒë√£ l∆∞u
        Command: /delete session_name
        """
        try:
            session_file = self.sessions_dir / f"{session_name}.json"
            if session_file.exists():
                session_file.unlink()
                print(f"üóëÔ∏è Session '{session_name}' ƒë√£ ƒë∆∞·ª£c x√≥a")
                return True
            else:
                print(f"‚ùå Session '{session_name}' kh√¥ng t·ªìn t·∫°i")
                return False
        except Exception as e:
            print(f"‚ùå L·ªói x√≥a session: {e}")
            return False
    
    def create_custom_model(self, model_name: str, base_model: str = "gemma3:latest",
                           system_prompt: str = None, parameters: Dict = None) -> bool:
        """
        T·∫°o custom model v·ªõi fine-tuning parameters
        Command: /finetune model_name base_model
        """
        try:
            # Create Modelfile
            modelfile_content = f"FROM {base_model}\n"
            
            if system_prompt:
                modelfile_content += f'SYSTEM """{system_prompt}"""\n'
            
            if parameters:
                for param, value in parameters.items():
                    modelfile_content += f"PARAMETER {param} {value}\n"
            
            # Default parameters for education consultation
            default_params = {
                "temperature": 0.3,
                "top_p": 0.9,
                "top_k": 40,
                "repeat_penalty": 1.1
            }
            
            for param, value in default_params.items():
                if parameters is None or param not in parameters:
                    modelfile_content += f"PARAMETER {param} {value}\n"
            
            # Save Modelfile
            modelfile_path = self.models_dir / f"{model_name}.Modelfile"
            with open(modelfile_path, 'w', encoding='utf-8') as f:
                f.write(modelfile_content)
            
            # Create model via Ollama API
            create_url = f"{self.ollama_url}/api/create"
            payload = {
                "name": model_name,
                "modelfile": modelfile_content
            }
            
            response = requests.post(create_url, json=payload, stream=True)
            
            if response.status_code == 200:
                print(f"üéØ Custom model '{model_name}' ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng")
                print(f"üìÅ Modelfile saved: {modelfile_path}")
                return True
            else:
                print(f"‚ùå L·ªói t·∫°o model: {response.status_code}")
                return False
                
        except Exception as e:
            print(f"‚ùå L·ªói t·∫°o custom model: {e}")
            return False
    
    def load_template_session(self, template_type: str) -> bool:
        """
        T·∫£i template session cho consultation type c·ª• th·ªÉ
        """
        if template_type not in self.session_templates:
            print(f"‚ùå Template '{template_type}' kh√¥ng t·ªìn t·∫°i")
            print(f"üìã Available templates: {list(self.session_templates.keys())}")
            return False
        
        template = self.session_templates[template_type]
        
        session_context = {
            "session_type": template_type,
            "system_context": template["system_context"],
            "parameters": template["parameters"],
            "template_loaded": True
        }
        
        self.current_session = {
            "name": f"template_{template_type}",
            "timestamp": datetime.now().isoformat(),
            "context": session_context,
            "conversation_history": [],
            "active_model": self.active_model
        }
        
        print(f"üìã Template '{template_type}' ƒë√£ ƒë∆∞·ª£c t·∫£i")
        return True
    
    def get_session_context(self) -> Optional[Dict]:
        """L·∫•y context c·ªßa session hi·ªán t·∫°i"""
        return self.current_session.get("context") if self.current_session else None
    
    def add_to_conversation_history(self, user_message: str, 
                                   assistant_response: str, metadata: Dict = None):
        """Th√™m v√†o l·ªãch s·ª≠ h·ªôi tho·∫°i"""
        if not self.current_session:
            self.current_session = {
                "name": "default",
                "timestamp": datetime.now().isoformat(),
                "context": {},
                "conversation_history": [],
                "active_model": self.active_model
            }
        
        conversation_entry = {
            "timestamp": datetime.now().isoformat(),
            "user": user_message,
            "assistant": assistant_response,
            "metadata": metadata or {}
        }
        
        if "conversation_history" not in self.current_session:
            self.current_session["conversation_history"] = []
        
        self.current_session["conversation_history"].append(conversation_entry)
    
    def export_session(self, session_name: str, format: str = "json") -> Optional[str]:
        """
        Export session ƒë·ªÉ chia s·∫ª ho·∫∑c backup
        """
        session_data = self.load_session(session_name) if session_name != "current" else self.current_session
        
        if not session_data:
            return None
        
        if format == "json":
            export_file = self.sessions_dir / f"{session_name}_export.json"
            with open(export_file, 'w', encoding='utf-8') as f:
                json.dump(session_data, f, ensure_ascii=False, indent=2)
            return str(export_file)
        
        elif format == "markdown":
            export_file = self.sessions_dir / f"{session_name}_export.md"
            
            with open(export_file, 'w', encoding='utf-8') as f:
                f.write(f"# Session: {session_data['name']}\n\n")
                f.write(f"**Timestamp:** {session_data['timestamp']}\n")
                f.write(f"**Model:** {session_data.get('active_model', 'Unknown')}\n")
                f.write(f"**Type:** {session_data.get('session_type', 'general')}\n\n")
                
                if "conversation_history" in session_data:
                    f.write("## Conversation History\n\n")
                    for entry in session_data["conversation_history"]:
                        f.write(f"### {entry['timestamp'][:16]}\n\n")
                        f.write(f"**User:** {entry['user']}\n\n")
                        f.write(f"**Assistant:** {entry['assistant']}\n\n")
                        f.write("---\n\n")
            
            return str(export_file)
        
        return None
    
    def process_command(self, command: str) -> Dict:
        """
        X·ª≠ l√Ω c√°c commands cho session management
        """
        parts = command.strip().split()
        if not parts or not parts[0].startswith('/'):
            return {"success": False, "message": "Invalid command format"}
        
        cmd = parts[0][1:].lower()  # Remove '/' prefix
        
        try:
            if cmd == "save" and len(parts) >= 2:
                session_name = parts[1]
                success = self.save_session(session_name, self.get_session_context() or {})
                return {"success": success, "message": f"Session {session_name} saved" if success else "Failed to save session"}
            
            elif cmd == "load" and len(parts) >= 2:
                session_name = parts[1]
                session_data = self.load_session(session_name)
                return {"success": session_data is not None, "data": session_data}
            
            elif cmd == "clear":
                success = self.clear_session()
                return {"success": success, "message": "Session cleared" if success else "Failed to clear session"}
            
            elif cmd == "list":
                sessions = self.list_sessions()
                return {"success": True, "sessions": sessions}
            
            elif cmd == "delete" and len(parts) >= 2:
                session_name = parts[1]
                success = self.delete_session(session_name)
                return {"success": success, "message": f"Session {session_name} deleted" if success else "Failed to delete session"}
            
            elif cmd == "template" and len(parts) >= 2:
                template_type = parts[1]
                success = self.load_template_session(template_type)
                return {"success": success, "message": f"Template {template_type} loaded" if success else "Failed to load template"}
            
            elif cmd == "finetune" and len(parts) >= 3:
                model_name = parts[1]
                base_model = parts[2]
                success = self.create_custom_model(model_name, base_model)
                return {"success": success, "message": f"Model {model_name} created" if success else "Failed to create model"}
            
            elif cmd == "export" and len(parts) >= 2:
                session_name = parts[1]
                format_type = parts[2] if len(parts) >= 3 else "json"
                export_path = self.export_session(session_name, format_type)
                return {"success": export_path is not None, "export_path": export_path}
            
            else:
                return {"success": False, "message": f"Unknown command or missing parameters: {command}"}
                
        except Exception as e:
            return {"success": False, "message": f"Error processing command: {e}"}

# Global session manager instance
session_manager = OllamaSessionManager()
