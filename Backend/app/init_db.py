#!/usr/bin/env python3
"""
Database Initialization Script for Enhanced Education Consultant System
This script initializes the database with sample data and sets up the AI components.
"""

import json
import os
import sys
from datetime import datetime

# Add the app directory to the Python path
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def init_database():
    """Initialize the database with sample data"""
    
    # Base directory paths
    base_dir = os.path.dirname(os.path.abspath(__file__))
    database_dir = os.path.join(base_dir, '..', '..', 'Database')
    
    # Ensure database directory exists
    os.makedirs(database_dir, exist_ok=True)
    
    # Sample survey data (khaosat.json)
    sample_surveys = [
        {
            "id": 1,
            "user_id": "user_001",
            "survey_type": "academic_preference",
            "questions_answers": {
                "favorite_subjects": ["To√°n", "V·∫≠t l√Ω", "H√≥a h·ªçc"],
                "learning_style": "visual",
                "career_interests": ["C√¥ng ngh·ªá th√¥ng tin", "K·ªπ thu·∫≠t"],
                "strengths": ["T∆∞ duy logic", "Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ"],
                "weaknesses": ["Giao ti·∫øp", "Thuy·∫øt tr√¨nh"]
            },
            "timestamp": datetime.now().isoformat()
        },
        {
            "id": 2,
            "user_id": "user_002",
            "survey_type": "career_exploration",
            "questions_answers": {
                "favorite_subjects": ["VƒÉn h·ªçc", "L·ªãch s·ª≠", "ƒê·ªãa l√Ω"],
                "learning_style": "auditory",
                "career_interests": ["Gi√°o d·ª•c", "B√°o ch√≠"],
                "strengths": ["Vi·∫øt l√°ch", "Ph√¢n t√≠ch"],
                "weaknesses": ["To√°n h·ªçc", "Khoa h·ªçc"]
            },
            "timestamp": datetime.now().isoformat()
        }
    ]
    
    # Sample grade data (diem_simplified.json)
    sample_grades = [
        {
            "id": 1,
            "user_id": "user_001",
            "semester": "2023-2024-1",
            "subjects": {
                "To√°n": 8.5,
                "V·∫≠t l√Ω": 8.0,
                "H√≥a h·ªçc": 7.5,
                "Sinh h·ªçc": 7.0,
                "VƒÉn": 6.5,
                "Anh": 7.5,
                "L·ªãch s·ª≠": 6.0,
                "ƒê·ªãa l√Ω": 6.5
            },
            "gpa": 7.31,
            "ranking": 15,
            "total_students": 150
        },
        {
            "id": 2,
            "user_id": "user_002",
            "semester": "2023-2024-1",
            "subjects": {
                "To√°n": 6.0,
                "V·∫≠t l√Ω": 5.5,
                "H√≥a h·ªçc": 6.0,
                "Sinh h·ªçc": 6.5,
                "VƒÉn": 9.0,
                "Anh": 8.0,
                "L·ªãch s·ª≠": 8.5,
                "ƒê·ªãa l√Ω": 8.0
            },
            "gpa": 7.19,
            "ranking": 18,
            "total_students": 150
        }
    ]
    
    # Save survey data
    khaosat_path = os.path.join(database_dir, 'khaosat.json')
    with open(khaosat_path, 'w', encoding='utf-8') as f:
        json.dump(sample_surveys, f, ensure_ascii=False, indent=2)
    
    # Save grade data
    diem_path = os.path.join(database_dir, 'diem_simplified.json')
    with open(diem_path, 'w', encoding='utf-8') as f:
        json.dump(sample_grades, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ Database initialized successfully!")
    print(f"üìÅ Survey data saved to: {khaosat_path}")
    print(f"üìÅ Grade data saved to: {diem_path}")

def init_sample_courses():
    """Initialize sample course data for the recommendation system"""
    
    base_dir = os.path.dirname(os.path.abspath(__file__))
    database_dir = os.path.join(base_dir, '..', '..', 'Database')
    
    sample_courses = [
        {
            "id": 1,
            "title": "Khoa h·ªçc M√°y t√≠nh",
            "category": "STEM",
            "description": "Ng√†nh h·ªçc v·ªÅ thu·∫≠t to√°n, l·∫≠p tr√¨nh v√† c√¥ng ngh·ªá th√¥ng tin",
            "prerequisites": ["To√°n h·ªçc m·∫°nh", "T∆∞ duy logic"],
            "career_prospects": ["L·∫≠p tr√¨nh vi√™n", "K·ªπ s∆∞ ph·∫ßn m·ªÅm", "Data Scientist"],
            "difficulty_level": 8,
            "duration_years": 4,
            "skills_required": ["T∆∞ duy logic", "Gi·∫£i quy·∫øt v·∫•n ƒë·ªÅ", "To√°n h·ªçc"],
            "universities": ["ƒê·∫°i h·ªçc B√°ch Khoa", "ƒê·∫°i h·ªçc C√¥ng ngh·ªá", "ƒê·∫°i h·ªçc Qu·ªëc gia"]
        },
        {
            "id": 2,
            "title": "Ng√¥n ng·ªØ Anh",
            "category": "Humanities",
            "description": "Ng√†nh h·ªçc v·ªÅ ng√¥n ng·ªØ, vƒÉn h·ªçc v√† vƒÉn h√≥a Anh-M·ªπ",
            "prerequisites": ["Kh·∫£ nƒÉng ngo·∫°i ng·ªØ", "K·ªπ nƒÉng giao ti·∫øp"],
            "career_prospects": ["Gi√°o vi√™n", "Phi√™n d·ªãch", "Nh√† b√°o"],
            "difficulty_level": 6,
            "duration_years": 4,
            "skills_required": ["Giao ti·∫øp", "Vi·∫øt l√°ch", "Ph√¢n t√≠ch vƒÉn b·∫£n"],
            "universities": ["ƒê·∫°i h·ªçc Ngo·∫°i ng·ªØ", "ƒê·∫°i h·ªçc S∆∞ ph·∫°m", "ƒê·∫°i h·ªçc Khoa h·ªçc X√£ h·ªôi"]
        },
        {
            "id": 3,
            "title": "K·ªπ thu·∫≠t C∆° kh√≠",
            "category": "Engineering",
            "description": "Ng√†nh h·ªçc v·ªÅ thi·∫øt k·∫ø, ch·∫ø t·∫°o v√† v·∫≠n h√†nh m√°y m√≥c",
            "prerequisites": ["V·∫≠t l√Ω", "To√°n h·ªçc", "T∆∞ duy kh√¥ng gian"],
            "career_prospects": ["K·ªπ s∆∞ c∆° kh√≠", "Thi·∫øt k·∫ø s·∫£n ph·∫©m", "Qu·∫£n l√Ω s·∫£n xu·∫•t"],
            "difficulty_level": 9,
            "duration_years": 4,
            "skills_required": ["To√°n h·ªçc", "V·∫≠t l√Ω", "Thi·∫øt k·∫ø", "T∆∞ duy kh√¥ng gian"],
            "universities": ["ƒê·∫°i h·ªçc B√°ch Khoa", "ƒê·∫°i h·ªçc C√¥ng nghi·ªáp", "ƒê·∫°i h·ªçc K·ªπ thu·∫≠t"]
        }
    ]
    
    courses_path = os.path.join(database_dir, 'courses.json')
    with open(courses_path, 'w', encoding='utf-8') as f:
        json.dump(sample_courses, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ Sample courses initialized!")
    print(f"üìÅ Courses data saved to: {courses_path}")

def init_ai_components():
    """Initialize AI components and create necessary directories"""
    
    app_dir = os.path.dirname(os.path.abspath(__file__))
    
    # Create directories for AI components
    ai_dirs = [
        os.path.join(app_dir, 'data', 'vectors'),
        os.path.join(app_dir, 'data', 'cache'),
        os.path.join(app_dir, 'data', 'models')
    ]
    
    for dir_path in ai_dirs:
        os.makedirs(dir_path, exist_ok=True)
        print(f"üìÅ Created directory: {dir_path}")
    
    # Create initial vector database metadata
    vector_metadata = {
        "last_updated": datetime.now().isoformat(),
        "document_count": 0,
        "vector_dimension": 384,  # Default for sentence-transformers
        "model_name": "paraphrase-multilingual-MiniLM-L12-v2"
    }
    
    metadata_path = os.path.join(app_dir, 'data', 'vectors', 'metadata.json')
    with open(metadata_path, 'w', encoding='utf-8') as f:
        json.dump(vector_metadata, f, ensure_ascii=False, indent=2)
    
    print(f"‚úÖ AI components initialized!")

def main():
    """Main initialization function"""
    print("üöÄ Initializing Enhanced Education Consultant System...")
    print("=" * 60)
    
    try:
        # Initialize database
        init_database()
        print()
        
        # Initialize sample courses
        init_sample_courses()
        print()
        
        # Initialize AI components
        init_ai_components()
        print()
        
        print("=" * 60)
        print("üéâ System initialization completed successfully!")
        print("üìù You can now start the application with: python app.py")
        
    except Exception as e:
        print(f"‚ùå Error during initialization: {str(e)}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
